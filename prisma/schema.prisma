generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
}

model Merchant {
  id                     String                  @id @default(uuid())
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  firstName              String                  @db.VarChar(100)
  lastName               String                  @db.VarChar(100)
  storeName              String                  @db.VarChar(200)
  email                  String                  @unique @db.VarChar(100)
  phoneNumber            String                  @unique @db.VarChar(20)
  password               String                  @db.VarChar(100)
  storeAddress           String                  @db.VarChar(200)
  description            String                  @db.VarChar(3000)
  role                   String                  @db.VarChar(50)
  categories             Category[]
  products               Product[]
  tags                   Tag[]
  location               MerchantLocation?
  MerchantNearbyLandmark MerchantNearbyLandmark?

  @@map("merchants")
}

model MerchantLocation {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String   @unique
  lng        String   @db.VarChar(100)
  lat        String   @db.VarChar(100)

  @@map("merchant_locations")
}

model MerchantNearbyLandmark {
  id         String   @id @default(uuid())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  Merchant   Merchant @relation(fields: [merchantId], references: [id])
  merchantId String   @unique
  lng        String   @db.VarChar(100)
  lat        String   @db.VarChar(100)

  @@map("merchant_nearby_landmarks")
}

model Category {
  id           String    @id @default(uuid())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryName String    @unique @db.VarChar(200)
  Merchant     Merchant? @relation(fields: [merchantId], references: [id])
  merchantId   String?

  @@map("categories")
}

model Tag {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  tagName    String    @unique @db.VarChar(200)
  merchantId String?
  merchant   Merchant? @relation(fields: [merchantId], references: [id])

  @@map("tags")
}

model Customer {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  email       String   @unique @db.VarChar(100)
  phoneNumber String   @unique @db.VarChar(100)
  gender      String   @db.VarChar(100)
  dateOfBirth String   @db.VarChar(100)
  firstName   String   @db.VarChar(100)
  lastName    String   @db.VarChar(100)
  password    String   @db.VarChar(100)
  orders      Order[]

  @@map("customers")
}

model Otp {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  phoneNumber String   @unique
  otpSecret   String
  token       String

  @@map("otps")
}

model Order {
  id         String    @id @default(uuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  products   Product[]
  Customer   Customer? @relation(fields: [customerId], references: [id])
  customerId String?

  @@map("orders")
}

model Product {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  name         String   @db.VarChar(255)
  description  String   @db.VarChar(255)
  deliveryTime String   @db.VarChar(15)
  category     String   @db.VarChar(100)
  image        String   @db.VarChar(200)
  merchantId   String
  prices       Price[]
  merchant     Merchant @relation(fields: [merchantId], references: [id])
  Order        Order?   @relation(fields: [orderId], references: [id])
  orderId      String?

  @@map("products")
}

model Price {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  value     String   @db.VarChar(20)
  unit      String   @db.VarChar(20)
  productId String
  product   Product  @relation(fields: [productId], references: [id])

  @@map("prices")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}
